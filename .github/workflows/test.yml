name: Run tests

on:
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        # Install rollup manually because of bug with optional dependencies (https://github.com/npm/cli/issues/4828)
        run: npm install && npm install -D @rollup/rollup-linux-x64-gnu && npx playwright install

      - name: Run tests
        run: npm test
        env:
          PUBLIC_API_BASE_URL: ${{ vars.PUBLIC_API_BASE_URL }}
          PUBLIC_IMAGE_BASE_URL: ${{ vars.PUBLIC_IMAGE_BASE_URL }}

      - name: Test docker build
        run: docker build -t test .

  version:
    runs-on: ubuntu-latest
    steps:
      - name: Generate JWT and Authenticate with GitHub CLI
        run: |
          echo "Generating JWT..."
          PRIVATE_KEY="${{ secrets.APP_PRIVATE_KEY }}"
          APP_ID="${{ secrets.APP_ID }}"

          CURRENT_TIME=$(date +%s)
          EXPIRATION_TIME=$((CURRENT_TIME + 600))

          JWT_HEADER='{"alg":"RS256","typ":"JWT"}'
          JWT_PAYLOAD="{\"iat\": $((CURRENT_TIME - 60)), \"exp\": $EXPIRATION_TIME, \"iss\": $APP_ID}"

          HEADER_BASE64=$(echo -n "$JWT_HEADER" | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$JWT_PAYLOAD" | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')

          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"

          echo $JWT
          echo "Authenticating with GitHub CLI..."
          echo "$JWT" | gh auth login --with-token

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get version from package.json
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Version: $VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check Tag
        run: |
          TAG_EXISTS=$(gh release list --json tagName --jq '.[] | select(.tagName == "${{ env.VERSION }}") | length')
          if [ "$TAG_EXISTS" -gt 0 ]; then
            echo "Tag ${VERSION} already exists. Blocking the PR."
            echo "BLOCK_PR=true" >> $GITHUB_ENV
          else
            echo "Tag ${VERSION} does not exist."
            echo "BLOCK_PR=false" >> $GITHUB_ENV
          fi

      - name: Block PR
        if: env.BLOCK_PR == 'true'
        run: |
          gh pr review ${{ github.event.pull_request.number }} --request-changes --body "Version ${{ env.VERSION }} already exists; this will overwrite the existing release. If this is a mistake, please bump the version in package.json."
